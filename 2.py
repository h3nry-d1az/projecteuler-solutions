r"""# Even Fibonacci Numbers
**Problem:** Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
  $$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$

  By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

**Solution:** Firstly, I'll be using the memoized implementation of the Fibonacci number function, which consists of checking whether $F_n$ has already been computed and, if so, return it instead of recalculating the entire value once again---using a hash map (dictionary) as storage.

  Notice now that $F_n$ is divisible by two every three iterations (because after two odd numbers, the next Fibonacci number will be their sum, thus even), so the problem becomes trivial and efficient with a `while` loop with a counter that starts at two and increases by three, yielding $\boxed{4613732}$ as the final result."""

def fibo(n: int, memo: dict) -> int:
  """Returns the $n$th Fibonacci number."""
  if memo.get(n): return memo[n]
  else:
    memo[n] = fibo(n-1, memo) + fibo(n-2, memo)
    return memo[n]

def solution() -> None:
  """Solution entry point."""
  memo = {1: 1, 2: 2}
  k = 2
  count = 0
  while fibo(k, memo) <= 4_000_000:
    if fibo(k, memo) % 2 == 0:
      count += fibo(k, memo)
    k += 3
  print(count) # 4613732

if __name__ == '__main__': solution()